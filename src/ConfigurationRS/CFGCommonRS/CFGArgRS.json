{
  "bitgen": [
    {
      "gen_bitstream": {
        "option": [
          {
            "name": "compress",
            "short": "c",
            "type": "flag",
            "optional": true,
            "help": "Enable compression"
          },
          {
            "name": "aes_key",
            "short": "a",
            "type": "str",
            "optional": true,
            "help": ["Binary file that contains 16 or 32 Bytes AES key.",
                     "Bitstream is encrypted if it is specified"]
          },
          {
            "name": "signing_key",
            "short": "s",
            "type": "str",
            "optional": true,
            "help": ["Private PEM file. Bitstream is signed if it is specified"]
          },
          {  
            "name": "passphrase",
            "short": "p",
            "type": "str", 
            "optional": true,
            "help": ["Passphrase or text file where the first line is treated as",
                     "passphrase to the private PEM. Specify this if private key is",
                     "protected, or passphrase will be prompted"]
          }
        ],
        "desc": "Generate configuration bitstream file",
        "help": [
          "To generate configuration file:",
          "  --{compress} --aes_key={input AES key binary file}",
          "  --signing_key={input .pem} --passphase={passphrase input}",
          "  <input .bitasm> <output .cfgbit>"
        ],
        "arg": [2, 2]
      }
    },
    {
      "gen_private_pem": {
        "option": [
          {
            "name": "signing_key",
            "short": "s",
            "type": "prime256v1|rsa2048",
            "help": ["Signing key type. Supported types are prime256v1|rsa2048"]
          },
          {  
            "name": "no_passphrase",
            "short": "n",
            "type": "flag", 
            "optional": true,
            "help": "Do not protect private PEM file with passphrase during generation"
          },
          {  
            "name": "passphrase",
            "short": "p",
            "type": "str", 
            "optional": true,
            "help": ["Passphrase or text file where the first line is treated as",
                     "passphrase to the private PEM. Specify this if private key needs",
                     "to be protected, or passphrase will be prompted"]
          }
        ],
        "desc": "Generate signing private PEM",
        "help": [
          "To generate signing private PEM:",
          "  --{no_passphrase} --passphase={passphase or text file}",
          "  --signing_key=<prime256v1|rsa2048> <output .pem>"
        ],
        "arg": [1, 1]
      }
    },
    {
      "gen_public_pem": {
        "option": [
          {  
            "name": "passphrase",
            "short": "p",
            "type": "str", 
            "optional": true,
            "help": ["Passphrase or text file where the first line is treated as",
                     "passphrase to the private PEM. Specify this if private key is",
                     "protected, or passphrase will be prompted"]
          }
        ],
        "desc": "Generate signing public PEM",
        "help": [
          "To generate signing public PEM:",
          "  --passphase={passphase or text file} <input .pem> <output .pem>"
        ],
        "arg": [2, 2]
      }
    },
    {
      "parse": {
        "option": [
          {  
            "name" : "detail",
            "short" : "d",
            "type" : "flag", 
            "optional" : true,
            "hide" : true,
            "help" : "Show debug information in detail"
          },
          {
            "name": "aes_key",
            "short": "a",
            "type": "str",
            "optional": true,
            "help": ["Binary file that contains 16 or 32 Bytes AES key.",
                     "It is used to decompress bitstream if bitstream is",
                     "encrypted"]
          }
        ],
        "hidden": true,
        "desc": "Parse configuration bitstream file",
        "help": [
          "To parse configuration file:",
          "  --aes_key={input AES key binary file} <input .cfgbit>",
          "  <output .debug.txt>"
        ],
        "arg": [2, 2]
      }
    },
    {
      "combine_bop": {
        "hidden": true,
        "desc": "Combine two BOP base configuration bitstream file",
        "help": [
          "To combile two BOP base .cfgbit files",
          "  <Input 1 .cfgbit> <Input 2 .cfgbit> <output .cfgbit>"
        ],
        "arg": [3, 3]
      }
    },
    {
      "gen_ubi": {
        "option": [
          {
            "name": "header_version",
            "short": "v",
            "type": "int",
            "help": ["Header version"]
          },
          {
            "name": "product_id",
            "short": "p",
            "type": "int",
            "help": ["Product ID"]
          },
          {
            "name": "customer_id",
            "short": "c",
            "type": "int",
            "help": ["Customer ID"]
          },
          {
            "name": "image_version",
            "short": "i",
            "type": "int",
            "help": ["Image version"]
          },
          {
            "name": "type",
            "short": "t",
            "type": "S|B|K|R",
            "help": ["UBI image type"]
          }
        ],
        "hidden": true,
        "desc": "Generate UBI package by combination BOP input(s)",
        "help": [
          "To generate UBI file:",
          "  --header_version=<header version> --product_id=<prod id>",
          "  --customer_id=<customer id> --image_version=<img version>",
          "  --type=<img type> <BOP input>s <output .cfgbit>\n",
          "BOP input can be single or two files. Both old and new",
          "  formats are supported"
        ],
        "arg": [2, 3]
      }
    },
    {
      "help": "Configuration File Generation Tool"
    }
  ],
  "bitasm": [
    {
      "gen_device_database": {
        "option": [
          {
            "name": "device",
            "short": "d",
            "type": "str",
            "help": "Device name"
          }
        ],
        "desc": "Generate device database from fabric bitstream XML",
        "help": [
          "To generate device database:",
          "  --device=<device name> <input fabric bitstream .xml> <output .ddb>"
        ],
        "arg": [2, 2]
      }
    },
    {
      "gen_bitstream_bit": {
        "option": [
          {
            "name": "device",
            "short": "d",
            "type": "str",
            "help": "Device name or device database file (.ddb)"
          },
          {
            "name": "reverse",
            "short": "r",
            "type": "flag",
            "optional": true,
            "help": "Write configuration bits in reversed WL order"
          }
        ],
        "desc": "Generate fabric bitstream",
        "help": [
          "To generate fabric bitstream (in LATCH format):",
          "  --device=<device name or .ddb> --{reserse}",
          "  <input .bit in CCFF format> <output .bit in LATCH format>"
        ],
        "arg": [2, 2]
      }
    },
    {
      "gen_bitstream_xml": {
        "option": [
          {
            "name": "device",
            "short": "d",
            "type": "str",
            "help": "Device name or device database file (.ddb)"
          },
          {
            "name": "protocol",
            "short": "p",
            "type": "ccff|latch",
            "help": "Configuration protocol"
          },
          {
            "name": "reverse",
            "short": "r",
            "type": "flag",
            "optional": true,
            "help": "Write configuration bits in reversed WL order"
          }
        ],
        "desc": "Generate fabric bitstream XML",
        "help": [
          "To generate fabric bitstream XML:",
          "  --device=<device name or .ddb> --protocol=<ccff|latch>",
          "  --{reserve} <input .bit in CCFF format> <output .xml>"
        ],
        "arg": [2, 2]
      }
    },
    {
      "help": "Configuration File Generation Internal Tool"
    }
  ],
  "debugger": [
    {
      "load": {
        "option": [
          {
            "name": "file",
            "short": "f",
            "type": "str",
            "help": "Specify user design .bitasm file to start debugging"
          }
        ],
        "desc": "Start a debugging session with user design specified in a .bitasm file",
        "help": [
          "To start a debugging session with user design:",
          "  debugger load -f {.bitasm file}"
        ],
        "arg": [0, 0]
      }
    },
    {
      "unload": {
        "desc": "Stop the debugging session and clear the loaded OCLA information",
        "help": [
          "To stop and clear the debugging session:",
          "  debugger unload"
        ],
        "arg": [0, 0]
      }
    },
    {
      "info": {
        "option": [
          {
            "name": "cable",
            "short": "b",
            "type": "str",
            "optional": true,
            "default" : "1",
            "help": "Cable name or index"
          },
          {
            "name": "device",
            "short": "d",
            "type": "int",
            "optional": true,
            "default" : 1,
            "help": "Device index"
          }
        ],
        "desc": "Command to display all probe information in the user design parsed from the .bitasm file. And also, the current OCLA global and trigger configuration.",
        "help": [
          "To show all information:",
          "  debugger info -c {cable name/index} -b {device index}"
        ],
        "arg": [0, 0]
      }
    },
    {
      "show_instance": {
        "option": [
          {
            "name": "cable",
            "short": "b",
            "type": "str",
            "optional": true,
            "default" : "1",
            "help": "Cable name or index"
          },
          {
            "name": "device",
            "short": "d",
            "type": "int",
            "optional": true,
            "default" : 1,
            "help": "Device index"
          }
        ],
        "hidden": true,
        "desc": "For debugging. Show the physical OCLA instance information.",
        "help": [
          "To show OCLA instance information:",
          "  debugger show_instance -b {cable name/index} -d {device index}"
        ],
        "arg": [0, 0]
      }
    },
    {
      "status": {
        "option": [
          {
            "name": "cable",
            "short": "b",
            "type": "str",
            "optional": true,
            "default" : "1",
            "help": "Cable name or index"
          },
          {
            "name": "device",
            "short": "d",
            "type": "int",
            "optional": true,
            "default" : 1,
            "help": "Device index"
          },
          {
            "name": "domain",
            "short": "n",
            "type": "int",
            "optional": false,
            "help": "Clock domain ID"
          }
        ],
        "desc": "To query the clock domain sampling status.",
        "help": [
          "To query the clock domain:",
          "  debugger status -n <clock domain id>"
        ],
        "arg": [0, 0]
      }
    },
    {
      "start": {
        "option": [
          {
            "name": "cable",
            "short": "b",
            "type": "str",
            "optional": true,
            "default" : "1",
            "help": "Cable name or index"
          },
          {
            "name": "device",
            "short": "d",
            "type": "int",
            "optional": true,
            "default" : 1,
            "help": "Device index"
          },
          {
            "name": "domain",
            "short": "n",
            "type": "int",
            "optional": false,
            "help": "Clock domain ID"
          },
          {
            "name": "show_waveform",
            "short": "s",
            "type": "true|false",
            "optional": true,
            "default": "true",
            "help": "True to wait for sampling complete and show waveform in GtkWave or timeout otherwise return immediately (default true)"
          },
          {
            "name": "timeout",
            "short": "t",
            "type": "int",
            "optional": true,
            "default": 60,
            "help": "Command timeout in seconds (default 60)"
          },
          {
            "name": "output",
            "short": "o",
            "type": "str",
            "optional": true,
            "default" : "",
            "help": "Output waveform filepath"
          }
        ],
        "desc": "To start the OCLA debug subsystem of a clock domain to capture signal samples.",
        "help": [
          "To start the debug subsystem:",
          "  debugger start -n <clock domain id>"
        ],
        "arg": [0, 0]
      }
    },
    {
      "show_waveform": {
        "option": [
          {
            "name": "cable",
            "short": "b",
            "type": "str",
            "optional": true,
            "default" : "1",
            "help": "Cable name or index"
          },
          {
            "name": "device",
            "short": "d",
            "type": "int",
            "optional": true,
            "default" : 1,
            "help": "Device index"
          },
          {
            "name": "domain",
            "short": "n",
            "type": "int",
            "optional": false,
            "help": "Clock domain ID"
          },
          {
            "name": "output",
            "short": "o",
            "type": "str",
            "default" : "",
            "optional": true,
            "help": "Output waveform filepath"
          }
        ],
        "desc": "To generate waveform file and display the signal waveform of a clock domain in GtkWave UI app.",
        "help": [
          "To display the waveform in GTKWave",
          "  debugger show_waveform",
          "  -b {cable name/index}",
          "  -d {device index}",
          "  -o {filepath}"
        ],
        "arg": [0, 0]
      }
    },
    {
      "list_cable": {
        "option": [
          {
            "name": "verbose",
            "short": "v",
            "type": "flag",
            "optional": true,
            "default": false,
            "help": "Display additional information of list_cable output"
          }
        ],
        "desc": "To display all the connected/detected cables.",
        "help": ["To display all the connected/detected cables"],
        "arg" : [0, 0]
      }
    },
    {
      "list_device": {
        "option": [
          {
            "name": "verbose",
            "short": "v",
            "type": "flag",
            "optional": true,
            "default": false,
            "help": "Display additional information of list_device output"
          }
        ],
        "desc": "To display list of connected devices to each conneceted/detected cable.",
        "help": [ "To display list of connected devices to each conneceted/detected cable.",
                  "To display list of all connected devices on specify cable.",
                  "The cable argument input can be the cable name or cable index that map to its name."
                ],
        "arg" : [0, 1]
      }
    },
    {
      "read": {
        "option": [
          {
            "name": "cable",
            "short": "b",
            "type": "str",
            "optional": true,
            "default" : "1",
            "help": "Cable name or index"
          },
          {
            "name": "device",
            "short": "d",
            "type": "int",
            "optional": true,
            "default" : 1,
            "help": "Device index"
          },
          {
            "name": "addr",
            "short": "a",
            "type": "int",
            "optional": false,
            "help": "Register address to read"
          },
          {
            "name": "times",
            "short": "t",
            "type": "int",
            "default" : 1,
            "optional": true,
            "help": "Number of times to read"
          },
          {
            "name": "incr",
            "short": "i",
            "type": "int",
            "default" : 0,
            "optional": true,
            "help": "Number to advance the address after each read"
          }
        ],
        "hidden": true,
        "desc": "For software and IP debugging. To read the OCLA instance registers.",
        "help": [
          "To read a register:-",
          "  debugger read -b {cable name/index} -d {device index} -a <regaddr> -t <times> -i <incr. by>"
        ],
        "arg": [0, 0]
      }
    },
    {
      "write": {
        "option": [
          {
            "name": "cable",
            "short": "b",
            "type": "str",
            "optional": true,
            "default" : "1",
            "help": "Cable name or index"
          },
          {
            "name": "device",
            "short": "d",
            "type": "int",
            "optional": true,
            "default" : 1,
            "help": "Device index"
          },
          {
            "name": "addr",
            "short": "a",
            "type": "int",
            "optional": false,
            "help": "Register address to write"
          },
          {
            "name": "value",
            "short": "v",
            "type": "int",
            "optional": false,
            "help": "Value to write"
          }
        ],
        "hidden": true,
        "desc": "For software and IP debugging. To write the OCLA instance registers.",
        "help": [
          "To write a register:-",
          "  debugger write -b {cable name/index} -d {device index} -a <regaddr> -v <value>"
        ],
        "arg": [0, 0]
      }
    },
    {
      "config": {
        "option": [
          {
            "name": "cable",
            "short": "b",
            "type": "str",
            "optional": true,
            "default" : "1",
            "help": "Cable name or index"
          },
          {
            "name": "device",
            "short": "d",
            "type": "int",
            "optional": true,
            "default" : 1,
            "help": "Device index"
          },
          {
            "name": "domain",
            "short": "n",
            "type": "int",
            "optional": false,
            "help": "Clock domain ID"
          },
          {
            "name": "mode",
            "short": "m",
            "optional": true,
            "default": "pre-trigger",
            "type": "pre-trigger|post-trigger|center-trigger|disable",
            "help": "Trigger mode"
          },
          {
            "name": "sample_size",
            "short": "s",
            "type": "int",
            "optional": true,
            "default": 0,
            "help": "Sample size to acquire (set to 0 to use memory depth as sample size)"
          },
          {
            "name": "trigger_condition",
            "short": "t",
            "type": "or|and|xor",
            "optional": true,
            "default": "or",
            "help": "Multiple trigger Boolean condition"
          }
        ],
        "desc": "To configure the global operation modes of a clock domain.",
        "help": [
          "To configure a clock domain:",
          "  debugger config ",
          "  -n <clock domain id>",
          "  -m {pre-trigger|post-trigger|center-trigger|disable}",
          "  -s {size}",
          "  -t {or|and|xor}"
        ],
        "arg": [0, 0]
      }
    },
    {
      "add_trigger": {
        "option": [
          {
            "name": "cable",
            "short": "b",
            "type": "str",
            "optional": true,
            "default" : "1",
            "help": "Cable name or index"
          },
          {
            "name": "device",
            "short": "d",
            "type": "int",
            "optional": true,
            "default" : 1,
            "help": "Device index"
          },
          {
            "name": "domain",
            "short": "n",
            "type": "int",
            "optional": false,
            "help": "Clock domain ID"
          },
          {
            "name": "probe",
            "short": "p",
            "optional": false,
            "type": "int",
            "help": "Probe ID"
          },
          {
            "name": "signal",
            "short": "s",
            "type": "str",
            "optional": false,
            "help": "Signal name or index"
          },
          {
            "name": "type",
            "short": "t",
            "type": "edge|level|value_compare|disable",
            "default": "edge",
            "optional": true,
            "help": "Trigger type"
          },
          {
            "name": "event",
            "short": "e",
            "type": "rising|falling|either|high|low|equal|lesser|greater",
            "default": "rising",
            "optional": true,
            "help": "Trigger event associated with the trigger type"
          },
          {
            "name": "value",
            "short": "v",
            "type": "int",
            "default": 0,
            "optional": true,
            "help": "Compare value"
          },
          {
            "name": "compare_width",
            "short": "w",
            "type": "int",
            "default": 0,
            "optional": true,
            "help": "Compare value width (no. of bits)"
          }
        ],
        "desc": "To add a trigger configuration into a clock domain.",
        "help": [
          "To add a trigger configuration:",
          "  debugger add_trigger",
          "  -n <clock domain id>",
          "  -p <probe id>",
          "  -s <signal name/index>",
          "  -t {edge|level|value_compare|disable}",
          "  -e {rising|falling|either|high|low|equal|lesser|greater}",
          "  -v {value}",
          "  -w {width}"
        ],
        "arg": [0, 0]
      }
    },
    {
      "edit_trigger": {
        "option": [
          {
            "name": "cable",
            "short": "b",
            "type": "str",
            "optional": true,
            "default" : "1",
            "help": "Cable name or index"
          },
          {
            "name": "device",
            "short": "d",
            "type": "int",
            "optional": true,
            "default" : 1,
            "help": "Device index"
          },
          {
            "name": "domain",
            "short": "n",
            "type": "int",
            "optional": false,
            "help": "Clock domain ID"
          },
          {
            "name": "index",
            "short": "i",
            "type": "int",
            "optional": false,
            "help": "Trigger entry index to modify"
          },
          {
            "name": "probe",
            "short": "p",
            "optional": false,
            "type": "int",
            "help": "Probe ID"
          },
          {
            "name": "signal",
            "short": "s",
            "type": "str",
            "optional": false,
            "help": "Signal name or index"
          },
          {
            "name": "type",
            "short": "t",
            "type": "edge|level|value_compare|disable",
            "default": "edge",
            "optional": true,
            "help": "Trigger type"
          },
          {
            "name": "event",
            "short": "e",
            "type": "rising|falling|either|high|low|equal|lesser|greater",
            "default": "rising",
            "optional": true,
            "help": "Trigger event associated with the trigger type"
          },
          {
            "name": "value",
            "short": "v",
            "type": "int",
            "default": 0,
            "optional": true,
            "help": "Compare value"
          },
          {
            "name": "compare_width",
            "short": "w",
            "type": "int",
            "default": 0,
            "optional": true,
            "help": "Compare value width (no. of bits)"
          }
        ],
        "desc": "To edit an existing trigger configuration of a clock domain.",
        "help": [
          "To edit a trigger configuration:",
          "  debugger edit_trigger",
          "  -n <clock domain id>",
          "  -i <trigger index>",
          "  -p <probe id>",
          "  -s <signal name/index>",
          "  -t {edge|level|value_compare|disable}",
          "  -e {rising|falling|either|high|low|equal|lesser|greater}",
          "  -v {value}",
          "  -w {width}"
        ]
      }
    },
    {
      "remove_trigger": {
        "option": [
          {
            "name": "cable",
            "short": "b",
            "type": "str",
            "optional": true,
            "default" : "1",
            "help": "Cable name or index"
          },
          {
            "name": "device",
            "short": "d",
            "type": "int",
            "optional": true,
            "default" : 1,
            "help": "Device index"
          },
          {
            "name": "domain",
            "short": "n",
            "type": "int",
            "optional": false,
            "help": "Clock domain ID"
          },
          {
            "name": "index",
            "short": "i",
            "type": "int",
            "optional": false,
            "help": "Trigger entry index to remove"
          }
        ],
        "desc": "To remove an existing trigger configuration from a clock domain.",
        "help": [
          "To remove a trigger configuration:",
          "  debugger remove_trigger",
          "  -n <clock domain id>",
          "  -i <trigger index>"
        ]
      }
    },
    {
      "help": "Configuration File Generation Internal Tool"
    }
  ]
}
