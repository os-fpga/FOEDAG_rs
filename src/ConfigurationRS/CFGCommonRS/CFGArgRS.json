{
   "bitgen": {
      "option" : [
         {  
            "name" : "detail",
            "short" : "d",
            "type" : "flag", 
            "optional" : true,
            "hide" : true,
            "help" : "Show information in detail"
         },
         {  
            "name" : "operation",
            "short" : "o",
            "type" : "str", 
            "optional" : true,
            "default" : "gen_bitstream",
            "help" : "File generation operation"
         },
         {
            "name" : "compress",
            "short" : "c",
            "type" : "flag",
            "optional" : true,
            "help" : "Enable compression"
         },
         {
            "name" : "aes_key",
            "short" : "a",
            "type" : "str",
            "optional" : true,
            "help" : ["Binary file that contains 16 or 32 Bytes AES key.",
                      "Bitstream is encrypted if it is specified in bitstream",
                      "generation operation"]
         },
         {
            "name" : "signing_key",
            "short" : "s",
            "type" : "str",
            "optional" : true,
            "help" : ["Depends on operation:",
                      "a. Bitstream generation: It is private PEM file. Bitstream",
                      "   is signed if it is specified",
                      "b. Private PEM generation: It is signing key type. Supported",
                      "   types are prime256v1|rsa2048"]
         },
         {  
            "name" : "no_passphrase",
            "short" : "n",
            "type" : "flag", 
            "optional" : true,
            "help" : "Do not protect private PEM file with passphrase during generation"
         },
         {  
            "name" : "passphrase",
            "short" : "p",
            "type" : "str", 
            "optional" : true,
            "help" : ["Passphrase or text file where the first line is treated as",
                      "passphrase to the private PEM"]
         }
      ],
      "help" : [
         "Configuration file generation tool. To generate:\n",
         "  1. Configuration bitstream (default operation)\n",
         "      --{compress} --aes_key={input AES key binary file}",
         "      --signing_key={input .pem} <input .bitasm> <output .cfgbit>\n",
         "  2. Signing private PEM\n",
         "      --operation=gen_private_pem --{no_passphrase}",
         "      --passphase={passphase or text file}",
         "      --signing_key=<prime256v1|rsa2048> <output .pem>\n",
         "  3. Signing public PEM\n",
         "      --operation=gen_public_pem --passphase={passphase or text file}",
         "      <input .pem> <output .pem>"
      ],
      "arg" : [1, 2]
   },
   "bitasm": {
      "option" : [
         {  
            "name" : "operation",
            "short" : "o",
            "type" : "gen_device_database|gen_bitstream_bit|gen_fabric_bitstream_xml",
            "help" : "File generation operation"
         },
         {
            "name" : "device",
            "short" : "d",
            "type" : "str",
            "optional" : true,
            "help" : "Device name or device database file (.ddb)"
         },
         {
            "name" : "protocol",
            "short" : "p",
            "type" : "ccff|latch",
            "optional" : true,
            "help" : ["Configuration protocol. Must be specified in fabric bitstream",
                      "XML generation"]
         },
         {
            "name" : "reverse",
            "short" : "r",
            "type" : "flag",
            "optional" : true,
            "help" : "Write configuration bits in reversed order in XML"
         }
      ],
      "help" : [
         "Internal configuration related file generation tool. To generate:\n",
         "  1. Device database file from JSON\n",
         "      --operation=gen_device_database --device=<device name>",
         "      <input fabric bitstream .xml> <output .ddb>\n",
         "  2. Fabric bitstream (in LATCH format)\n",
         "      --operation=gen_bitstream_bit --device=<device name or .ddb>",
         "      <input .bit in CCFF format> <output .bit in LATCH format>\n",
         "  3. Fabric bitstream XML\n",
         "      --operation=gen_fabric_bitstream_xml --device=<device name or .ddb>",
         "      --protocol=<ccff|latch> --{reserve} <input .bit in CCFF format>",
         "      <output .xml in CCFF format>\n"
      ],
      "arg" : [2, 2]
   }
}